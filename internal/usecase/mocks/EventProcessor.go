// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EventProcessor is an autogenerated mock type for the EventProcessor type
type EventProcessor struct {
	mock.Mock
}

type EventProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *EventProcessor) EXPECT() *EventProcessor_Expecter {
	return &EventProcessor_Expecter{mock: &_m.Mock}
}

// ProcessEvent provides a mock function with given fields: event
func (_m *EventProcessor) ProcessEvent(event []byte) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ProcessEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventProcessor_ProcessEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessEvent'
type EventProcessor_ProcessEvent_Call struct {
	*mock.Call
}

// ProcessEvent is a helper method to define mock.On call
//   - event []byte
func (_e *EventProcessor_Expecter) ProcessEvent(event interface{}) *EventProcessor_ProcessEvent_Call {
	return &EventProcessor_ProcessEvent_Call{Call: _e.mock.On("ProcessEvent", event)}
}

func (_c *EventProcessor_ProcessEvent_Call) Run(run func(event []byte)) *EventProcessor_ProcessEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *EventProcessor_ProcessEvent_Call) Return(_a0 error) *EventProcessor_ProcessEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventProcessor_ProcessEvent_Call) RunAndReturn(run func([]byte) error) *EventProcessor_ProcessEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventProcessor creates a new instance of EventProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventProcessor {
	mock := &EventProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
