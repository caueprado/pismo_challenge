// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	domain "pismo/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// SenderService is an autogenerated mock type for the SenderService type
type SenderService struct {
	mock.Mock
}

type SenderService_Expecter struct {
	mock *mock.Mock
}

func (_m *SenderService) EXPECT() *SenderService_Expecter {
	return &SenderService_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: event
func (_m *SenderService) SendMessage(event domain.EventMessage) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.EventMessage) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderService_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type SenderService_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - event domain.EventMessage
func (_e *SenderService_Expecter) SendMessage(event interface{}) *SenderService_SendMessage_Call {
	return &SenderService_SendMessage_Call{Call: _e.mock.On("SendMessage", event)}
}

func (_c *SenderService_SendMessage_Call) Run(run func(event domain.EventMessage)) *SenderService_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.EventMessage))
	})
	return _c
}

func (_c *SenderService_SendMessage_Call) Return(_a0 error) *SenderService_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderService_SendMessage_Call) RunAndReturn(run func(domain.EventMessage) error) *SenderService_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewSenderService creates a new instance of SenderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSenderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SenderService {
	mock := &SenderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
