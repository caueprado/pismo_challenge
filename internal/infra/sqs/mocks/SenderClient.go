// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	servicesqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"
)

// SenderClient is an autogenerated mock type for the SenderClient type
type SenderClient struct {
	mock.Mock
}

type SenderClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SenderClient) EXPECT() *SenderClient_Expecter {
	return &SenderClient_Expecter{mock: &_m.Mock}
}

// GetQueues provides a mock function with given fields:
func (_m *SenderClient) GetQueues() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQueues")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// SenderClient_GetQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueues'
type SenderClient_GetQueues_Call struct {
	*mock.Call
}

// GetQueues is a helper method to define mock.On call
func (_e *SenderClient_Expecter) GetQueues() *SenderClient_GetQueues_Call {
	return &SenderClient_GetQueues_Call{Call: _e.mock.On("GetQueues")}
}

func (_c *SenderClient_GetQueues_Call) Run(run func()) *SenderClient_GetQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SenderClient_GetQueues_Call) Return(_a0 map[string]string) *SenderClient_GetQueues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderClient_GetQueues_Call) RunAndReturn(run func() map[string]string) *SenderClient_GetQueues_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, msg
func (_m *SenderClient) Send(ctx context.Context, msg *servicesqs.SendMessageInput) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicesqs.SendMessageInput) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type SenderClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *servicesqs.SendMessageInput
func (_e *SenderClient_Expecter) Send(ctx interface{}, msg interface{}) *SenderClient_Send_Call {
	return &SenderClient_Send_Call{Call: _e.mock.On("Send", ctx, msg)}
}

func (_c *SenderClient_Send_Call) Run(run func(ctx context.Context, msg *servicesqs.SendMessageInput)) *SenderClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*servicesqs.SendMessageInput))
	})
	return _c
}

func (_c *SenderClient_Send_Call) Return(_a0 error) *SenderClient_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderClient_Send_Call) RunAndReturn(run func(context.Context, *servicesqs.SendMessageInput) error) *SenderClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewSenderClient creates a new instance of SenderClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSenderClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SenderClient {
	mock := &SenderClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
