// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: item
func (_m *Client) Insert(item map[string]*dynamodb.AttributeValue) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]*dynamodb.AttributeValue) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Client_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - item map[string]*dynamodb.AttributeValue
func (_e *Client_Expecter) Insert(item interface{}) *Client_Insert_Call {
	return &Client_Insert_Call{Call: _e.mock.On("Insert", item)}
}

func (_c *Client_Insert_Call) Run(run func(item map[string]*dynamodb.AttributeValue)) *Client_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]*dynamodb.AttributeValue))
	})
	return _c
}

func (_c *Client_Insert_Call) Return(_a0 error) *Client_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Insert_Call) RunAndReturn(run func(map[string]*dynamodb.AttributeValue) error) *Client_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
